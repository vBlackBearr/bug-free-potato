/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador;

import analizador.TokenAsignaciones;
import analizador.TokenComparaciones;
import javax.swing.JOptionPane;
import extraObjects.logsAcumulatorInstance;
import extraObjects.typeTableInstance;

/**
 *
 * @author TeamPotato:)
 */
public class Gramatica implements GramaticaConstants {

    TokenAsignaciones TA = new TokenAsignaciones();
    TokenComparaciones TC = new TokenComparaciones();

    logsAcumulatorInstance logsInstance = logsAcumulatorInstance.getInstance();

    public static int linea = 1;

    public static int la;
    String muestraLexico = "";
    int kindParaDeclarar = 0;
    Token valor1CompAsig = null;
    Token valor2CompAsig = null;

    Token valor1CompComp = null;
    Token valor2CompComp = null;

    typeTableInstance tableInstance = typeTableInstance.getInstance();

    final public Token getNextTokenWithoutIncrease() {
        if (token.next != null) {
            token = token.next;
        } else {
            GramaticaTokenManager token_source2 = token_source;
            token = token.next = token_source2.getNextToken();
        }
        return token;
    }

    /**
     * Fin Lexico
     */
    /**
     * Inicio sintactico
     */
    final public void Inicio() throws ParseException {
        TA.SetTables();
        TC.SetTables();
        try {
            Import();
            Clases();
            jj_consume_token(0);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en definicion de import o clase general");
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Cuerpo();
            }
        }
    }

    final public void Import() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IMPORT:
                jj_consume_token(IMPORT);
                Import1();
                break;
            default:
                jj_la1[0] = jj_gen;
                ;
        }
    }

    final public void Import1() throws ParseException {
        try {
            jj_consume_token(LIBR);
            Puntoyc();
            Import();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en nombre de libreria, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Import();
            }
        }
    }

    final public void Puntoyc() throws ParseException {
        try {
            jj_consume_token(PYC);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \";\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Tipo() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INT:
                    DeclararInt();
                    break;
                case CHAR:
                    DeclararChar();
                    break;
                case STRING:
                    DeclararString();
                    break;
                case BOOLEAN:
                    DeclararBool();
                    break;
                case FLOAT:
                    DeclararFloat();
                    break;
                case DOUBLE:
                    DeclararDouble();
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void DeclararInt() throws ParseException {
        kindParaDeclarar = GramaticaConstants.INT;
        try {
            jj_consume_token(INT);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void DeclararChar() throws ParseException {
        kindParaDeclarar = GramaticaConstants.CHAR;
        try {
            jj_consume_token(CHAR);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void DeclararString() throws ParseException {
        kindParaDeclarar = GramaticaConstants.STRING;
        try {
            jj_consume_token(STRING);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void DeclararBool() throws ParseException {
        kindParaDeclarar = GramaticaConstants.BOOLEAN;
        try {
            jj_consume_token(BOOLEAN);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void DeclararFloat() throws ParseException {
        kindParaDeclarar = GramaticaConstants.FLOAT;
        try {
            jj_consume_token(FLOAT);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void DeclararDouble() throws ParseException {
        kindParaDeclarar = GramaticaConstants.DOUBLE;
        try {
            jj_consume_token(DOUBLE);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void TipoEncapsular() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PUBLIC:
                    jj_consume_token(PUBLIC);
                    break;
                case PRIVATE:
                    jj_consume_token(PRIVATE);
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se espereba \"public\" o \"private\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Clasesn() throws ParseException {
        try {
            jj_consume_token(CLASES);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en nombre de clase, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Clases() throws ParseException {
        try {
            TipoEncapsular();
            jj_consume_token(CLASS);
            Clasesn();
            Llavea();
            ContenidoClase();
            Llavec();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            if (t.beginColumn != 1) {
                logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"class\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            }
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                ContenidoClase();
            }
        }
    }

    final public void Llavea() throws ParseException {
        try {
            jj_consume_token(LLAVA);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"{\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Llavec() throws ParseException {
        try {
            jj_consume_token(LLAVC);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"}\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void ContenidoClase() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PUBLIC:
                case PRIVATE:
                case CHAR:
                case STRING:
                case INT:
                case FLOAT:
                case BOOLEAN:
                case VOID:
                case DOUBLE:
                case CLASES:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case PUBLIC:
                        case PRIVATE:
                            TipoEncapsular();
                            break;
                        default:
                            jj_la1[3] = jj_gen;
                            ;
                    }
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CHAR:
                        case STRING:
                        case INT:
                        case FLOAT:
                        case BOOLEAN:
                        case DOUBLE:
                            Tipo();
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case CHAR:
                                case STRING:
                                case INT:
                                case FLOAT:
                                case BOOLEAN:
                                case DOUBLE:
                                    Declaracion();
                                    Puntoyc();
                                    break;
                                case FUNC:
                                    Metodo();
                                    break;
                                default:
                                    jj_la1[4] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case CLASES:
                            Constructor();
                            break;
                        case VOID:
                            Metodo_void();
                            break;
                        default:
                            jj_la1[5] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    ContenidoClase();
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en contenido de clase, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            la = t.beginLine;
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Constructor();
                Cuerpo();
            }
        }
    }

    final public void DeclaracionGlobal() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CORA:
                    jj_consume_token(CORA);
                    jj_consume_token(ENTERO);
                    jj_consume_token(CORC);
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
            Declarando();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ASIG:
                    DeclaracionAsignacion();
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                DeclaracionTA();
                DeclaracionT();
            }
        }
    }

    final public void Parea() throws ParseException {
        try {
            jj_consume_token(PAREA);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"(\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Parec() throws ParseException {
        try {
            jj_consume_token(PAREC);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \")\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Constructor() throws ParseException {
        try {
            Clasesn();
            Parea();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHAR:
                case STRING:
                case INT:
                case FLOAT:
                case BOOLEAN:
                case DOUBLE:
                    Argumentos();
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    ;
            }
            Parec();
            Llavea();
            Sentencia();
            Llavec();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en constructor, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Sentencia();
                ConstructorA();
            }
        }
    }

    final public void ConstructorA() throws ParseException {
        try {
            TipoEncapsular();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHAR:
                case STRING:
                case INT:
                case FLOAT:
                case BOOLEAN:
                case VOID:
                case DOUBLE:
                    Cuerpo();
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CLASES:
                            Clasesn();
                            Parea();
                            Argumentos();
                            Parec();
                            Llavea();
                            Sentencia();
                            Llavec();
                            ConstructorA();
                            break;
                        default:
                            jj_la1[10] = jj_gen;
                            ;
                    }
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en constructor, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Cuerpo();
                Argumentos();
                Sentencia();
                ConstructorA();
            }
        }
    }

    final public void Void() throws ParseException {
        try {
            jj_consume_token(VOID);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"void\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Cuerpo() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHAR:
                case STRING:
                case INT:
                case FLOAT:
                case BOOLEAN:
                case DOUBLE:
                    Tipo();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case FUNC:
                            Metodo();
                            break;
                        default:
                            jj_la1[12] = jj_gen;
                            Variables_clase();
                    }
                    CuerpoA();
                    break;
                case VOID:
                    Void();
                    MetodosA();
                    break;
                default:
                    jj_la1[13] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"void\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Metodo();
                MetodosA();
            }
        }
    }

    final public void CuerpoA() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PUBLIC:
            case PRIVATE:
                TipoEncapsular();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case CHAR:
                    case STRING:
                    case INT:
                    case FLOAT:
                    case BOOLEAN:
                    case DOUBLE:
                        Tipo();
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case FUNC:
                                Metodo();
                                break;
                            default:
                                jj_la1[14] = jj_gen;
                                Variables_clase();
                        }
                        break;
                    case VOID:
                        Void();
                        MetodosA();
                        break;
                    default:
                        jj_la1[15] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[16] = jj_gen;
                ;
        }
    }

    final public void MetodosA() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FUNC:
                    Func();
                    Metodo_void();
                    CuerpoA();
                    break;
                case VOID:
                    Principal();
                    CuerpoA();
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en metodo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Metodo_void();
                CuerpoA();
                Principal();
                CuerpoA();
            }
        }
    }

    final public void Prinmain() throws ParseException {
        try {
            jj_consume_token(PRINMAIN);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"principalMain\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Metodo_void();
                CuerpoA();
                Principal();
                CuerpoA();
            }
        }
    }

    final public void Principal() throws ParseException {
        try {
            Void();
            Prinmain();
            Parea();
            Parec();
            Llavea();
            Sentencia();
            Llavec();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en metodo principal, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Func() throws ParseException {
        try {
            jj_consume_token(FUNC);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en nombre de funcion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Metodo() throws ParseException {
        try {
            Func();
            Parea();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHAR:
                case STRING:
                case INT:
                case FLOAT:
                case BOOLEAN:
                case DOUBLE:
                    Argumentos();
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    ;
            }
            Parec();
            Llavea();
            Sentencia();
            Retorno();
            Llavec();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en metodo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Argumentos();
                Sentencia();
                Retorno();
            }
        }
    }

    final public void Return() throws ParseException {
        try {
            jj_consume_token(RETURN);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"return\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Retorno() throws ParseException {
        try {
            Return();
            Tipo_retorno();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en retorno, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Tipo_retorno();
            }
        }
    }

    final public void Tipo_retorno() throws ParseException {
        Valor();
        Puntoyc();
    }

    final public void Metodo_void() throws ParseException {
        try {
            Void();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FUNC:
                    Func();
                    Parea();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CHAR:
                        case STRING:
                        case INT:
                        case FLOAT:
                        case BOOLEAN:
                        case DOUBLE:
                            Argumentos();
                            break;
                        default:
                            jj_la1[19] = jj_gen;
                            ;
                    }
                    break;
                case PRINMAIN:
                    Prinmain();
                    Parea();
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            Parec();
            Llavea();
            Sentencia();
            Llavec();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en metodo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Argumentos();
                Sentencia();
                Cuerpo();
            }
        }
    }

    final public void Argumentos() throws ParseException {
        try {
            Declaracion();
            ArgumentosA();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en argumentos, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Declaracion();
                ArgumentosA();
            }
        }
    }

    final public void ArgumentosA() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COM:
                jj_consume_token(COM);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case CHAR:
                    case STRING:
                    case INT:
                    case FLOAT:
                    case BOOLEAN:
                    case DOUBLE:
                        Argumentos();
                        break;
                    default:
                        jj_la1[21] = jj_gen;
                        ;
                }
                break;
            default:
                jj_la1[22] = jj_gen;
                ;
        }
    }

    final public void Variables_clase() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHAR:
                case STRING:
                case INT:
                case FLOAT:
                case BOOLEAN:
                case DOUBLE:
                    Declaracion();
                    Puntoyc();
                    Variables_clase();
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en variables de clase, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Variables_clase();
            }
        }
    }

    final public void Sentencia() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IF:
                case WHILE:
                case DO:
                case CHAR:
                case STRING:
                case INT:
                case FLOAT:
                case BOOLEAN:
                case TRY:
                case THIS:
                case FOR:
                case SWITCH:
                case DOUBLE:
                case VAR:
                case FUNC:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case FOR:
                            jj_consume_token(FOR);
                            Sentencia_ciclofor();
                            Sentencia();
                            break;
                        case IF:
                            jj_consume_token(IF);
                            Sentencia_condicion();
                            Sentencia();
                            break;
                        case CHAR:
                        case STRING:
                        case INT:
                        case FLOAT:
                        case BOOLEAN:
                        case DOUBLE:
                            Declaracion();
                            Puntoyc();
                            Sentencia();
                            break;
                        case VAR:
                            Asignacion();
                            Puntoyc();
                            Sentencia();
                            break;
                        case SWITCH:
                            jj_consume_token(SWITCH);
                            Sentencia_switch();
                            Sentencia();
                            break;
                        case TRY:
                            jj_consume_token(TRY);
                            Sentencia_try();
                            Sentencia();
                            break;
                        case THIS:
                            jj_consume_token(THIS);
                            Sentencia_this();
                            Sentencia();
                            break;
                        case WHILE:
                        case DO:
                            Sentencia_ciclowhile();
                            Sentencia();
                            break;
                        case FUNC:
                            Func();
                            SentenciaLlamarMetodo();
                            Sentencia();
                            break;
                        default:
                            jj_la1[24] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en sentencia, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Sentencia();
            }
        }
    }

    final public void Parametros() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PAREA:
                case ENTERO:
                case FLOTANTEDOUBLE:
                case CARACTER:
                case CADENA:
                case VAR:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case VAR:
                            Var();
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case CORA:
                                    jj_consume_token(CORA);
                                    ArregloL();
                                    break;
                                default:
                                    jj_la1[26] = jj_gen;
                                    ;
                            }
                            Parametros2();
                            break;
                        case PAREA:
                        case ENTERO:
                        case FLOTANTEDOUBLE:
                            Exp();
                            break;
                        case CADENA:
                            jj_consume_token(CADENA);
                            Parametros2();
                            break;
                        case CARACTER:
                            jj_consume_token(CARACTER);
                            Parametros2();
                            break;
                        default:
                            jj_la1[27] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[28] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en parametros, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Parametros2();
            }
        }
    }

    final public void Parametros2() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COM:
                    jj_consume_token(COM);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case VAR:
                            Var();
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case CORA:
                                    jj_consume_token(CORA);
                                    ArregloL();
                                    break;
                                default:
                                    jj_la1[29] = jj_gen;
                                    ;
                            }
                            Parametros2();
                            break;
                        case PAREA:
                        case ENTERO:
                        case FLOTANTEDOUBLE:
                            Exp();
                            break;
                        case CADENA:
                            jj_consume_token(CADENA);
                            Parametros2();
                            break;
                        case CARACTER:
                            jj_consume_token(CARACTER);
                            Parametros2();
                            break;
                        default:
                            jj_la1[30] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en parametros, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Parametros2();
            }
        }
    }

    final public void SentenciaLlamarMetodo() throws ParseException {
        try {
            Parea();
            Parametros();
            Parec();
            Puntoyc();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en llamado de metodo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Parametros();
            }
        }
    }

    final public void Except() throws ParseException {
        try {
            jj_consume_token(EXCEPT);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"Except\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Catch() throws ParseException {
        try {
            jj_consume_token(CATCH);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"Catch\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Sentencia_try() throws ParseException {
        try {
            Llavea();
            Sentencia();
            Llavec();
            Catch();
            Parea();
            Except();
            Var();
            Parec();
            Llavea();
            Sentencia();
            Llavec();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en try-catch, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Catch();
                Sentencia();
            }
        }
    }

    final public void Sentencia_ciclofor() throws ParseException {
        try {
            Parea();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHAR:
                case STRING:
                case INT:
                case FLOAT:
                case BOOLEAN:
                case DOUBLE:
                    Declaracion();
                    break;
                case VAR:
                    Asignacion();
                    break;
                default:
                    jj_la1[32] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            Puntoyc();
            ExpresionBooleana();
            Puntoyc();
            Asignacion();
            Parec();
            Llavea();
            Sentencia();
            Llavec();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en ciclo for, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Sentencia();
            }
        }
    }

    final public void While() throws ParseException {
        try {
            jj_consume_token(WHILE);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"While\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Do() throws ParseException {
        try {
            jj_consume_token(DO);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"Do\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Sentencia_ciclowhile() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHILE:
                    While();
                    Parea();
                    ExpresionBooleana();
                    Parec();
                    Llavea();
                    Sentencia();
                    Llavec();
                    break;
                case DO:
                    Do();
                    Llavea();
                    Sentencia();
                    Llavec();
                    While();
                    Parea();
                    ExpresionBooleana();
                    Parec();
                    Puntoyc();
                    break;
                default:
                    jj_la1[33] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en ciclo while, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Sentencia();
            }
        }
    }

    final public void Sentencia_condicion() throws ParseException {
        try {
            Parea();
            ExpresionBooleana();
            Parec();
            Llavea();
            Sentencia();
            Llavec();
            Si_e();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Sentencia();
                Si_e();
            }
        }
    }

    final public void Sentencia_incremental() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INCRE:
                    jj_consume_token(INCRE);
                    break;
                case DECRE:
                    jj_consume_token(DECRE);
                    break;
                default:
                    jj_la1[34] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"++\" o \"--\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Sentencia_this() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VAR:
                    jj_consume_token(VAR);
                    jj_consume_token(ASIG);
                    Var();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CORA:
                            jj_consume_token(CORA);
                            ArregloL();
                            break;
                        default:
                            jj_la1[35] = jj_gen;
                            ;
                    }
                    Puntoyc();
                    Sentencia_this();
                    break;
                default:
                    jj_la1[36] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Sentencia_this();
            }
        }
    }

    final public void Break() throws ParseException {
        try {
            jj_consume_token(BREAK);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"break\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Sentencia_switch() throws ParseException {
        try {
            Var();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CORA:
                    jj_consume_token(CORA);
                    ArregloL();
                    break;
                default:
                    jj_la1[37] = jj_gen;
                    ;
            }
            Llavea();
            Case();
            jj_consume_token(DEF);
            jj_consume_token(DOSP);
            Sentencia();
            Break();
            Puntoyc();
            Llavec();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en sentencia switch, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Sentencia_switch();
                Sentencia();
            }
        }
    }

    final public void Cases() throws ParseException {
        try {
            jj_consume_token(CASE);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"Case\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Dosp() throws ParseException {
        try {
            jj_consume_token(DOSP);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \":\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Case() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case CASE:
                Cases();
                Caso();
                Dosp();
                Sentencia();
                Break();
                Puntoyc();
                Case();
                break;
            default:
                jj_la1[38] = jj_gen;
                ;
        }
    }

    final public void Caso() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ENTERO:
                    jj_consume_token(ENTERO);
                    break;
                case CADENA:
                    jj_consume_token(CADENA);
                    break;
                case CARACTER:
                    jj_consume_token(CARACTER);
                    break;
                case VAR:
                    Var();
                    break;
                default:
                    jj_la1[39] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en sentencia caso, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Si_e() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ELSE:
                jj_consume_token(ELSE);
                Si_EA();
                break;
            default:
                jj_la1[40] = jj_gen;
                ;
        }
    }

    final public void Si_EA() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LLAVA:
                    Llavea();
                    Sentencia();
                    Llavec();
                    break;
                case PAREA:
                    Sentencia_condicion();
                    break;
                default:
                    jj_la1[41] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en else, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Sentencia();
                Sentencia_condicion();
            }
        }
    }

    final public void ExpresionBooleana() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ENTERO:
                case FLOTANTEDOUBLE:
                case CARACTER:
                case CADENA:
                case VAR:
                    Comparacion();
                    break;
                case TRUE:
                    jj_consume_token(TRUE);
                    break;
                case FALSE:
                    jj_consume_token(FALSE);
                    break;
                case NOT:
                    jj_consume_token(NOT);
                    ExpresionBooleana();
                    break;
                default:
                    jj_la1[42] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            CondgA();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                ExpresionBooleana();
                OperadoresRelacionales();
            }
        }
    }

    void colocacionDatoParaComparacion1() throws ParseException {
        valor1CompComp = token;
    }

    void colocacionDatoParaComparacion2() throws ParseException {
        valor2CompComp = token;
        logsInstance.addSemanticLog(TC.checkAsing(valor1CompComp, valor2CompComp));
    }

    final public void Comparacion() throws ParseException {
        try {
            TipoDatoComparacion();
            colocacionDatoParaComparacion1();
            OperadoresRelacionales();
            TipoDato();
            colocacionDatoParaComparacion2();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                ExpresionBooleana();
                OperadoresRelacionales();
            }
        }
    }

    final public void CondgA() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case AND:
                case OR:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case AND:
                            jj_consume_token(AND);
                            ExpresionBooleana();
                            CondgA();
                            break;
                        case OR:
                            jj_consume_token(OR);
                            ExpresionBooleana();
                            CondgA();
                            break;
                        default:
                            jj_la1[43] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[44] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Exp();
            }
        }
    }

    final public void OperadoresRelacionales() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MAYORQ:
                    jj_consume_token(MAYORQ);
                    break;
                case MENORQ:
                    jj_consume_token(MENORQ);
                    break;
                case MAYORI:
                    jj_consume_token(MAYORI);
                    break;
                case MENORI:
                    jj_consume_token(MENORI);
                    break;
                case IGUALI:
                    jj_consume_token(IGUALI);
                    break;
                case DIFER:
                    jj_consume_token(DIFER);
                    break;
                default:
                    jj_la1[45] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Exp();
            }
        }
    }

    final public void Exp() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PAREA:
                    Parea();
                    Exp();
                    Parec();
                    ExpA();
                    break;
                case VAR:
                    jj_consume_token(VAR);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CORA:
                            jj_consume_token(CORA);
                            ArregloL();
                            break;
                        default:
                            jj_la1[46] = jj_gen;
                            ;
                    }
                    ExpA();
                    break;
                case ENTERO:
                    jj_consume_token(ENTERO);
                    ExpA();
                    break;
                case FLOTANTEDOUBLE:
                    jj_consume_token(FLOTANTEDOUBLE);
                    ExpA();
                    break;
                default:
                    jj_la1[47] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                ExpA();
            }
        }
    }

    final public void ExpA() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SUMA:
                    jj_consume_token(SUMA);
                    Exp();
                    break;
                case RESTA:
                    jj_consume_token(RESTA);
                    Exp();
                    break;
                case DIVIS:
                    jj_consume_token(DIVIS);
                    Exp();
                    break;
                case POTEN:
                    jj_consume_token(POTEN);
                    Exp();
                    break;
                case MODUL:
                    jj_consume_token(MODUL);
                    Exp();
                    break;
                default:
                    jj_la1[48] = jj_gen;
                    Parametros();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                Parametros();
            }
        }
    }

    final public void Var() throws ParseException {
        try {
            jj_consume_token(VAR);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en nombre de variable, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Asignacion() throws ParseException {
        jj_consume_token(VAR);
        verificarExistencia();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ASIG:
                Asignacion2();
                break;
            case INCRE:
            case DECRE:
                Sentencia_incremental();
                break;
            default:
                jj_la1[49] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Asignacion2() throws ParseException {
        valor1CompAsig = token;
        jj_consume_token(ASIG);
        Expr();
    }

    final public void Expr() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TRUE:
            case FALSE:
            case ENTERO:
            case FLOTANTEDOUBLE:
            case CARACTER:
            case CADENA:
            case VAR:
                PonerDato();
                break;
            case PAREA:
                ParentesisExpr();
                break;
            default:
                jj_la1[50] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Expr2() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SUMA:
            case RESTA:
            case DIVIS:
            case POTEN:
            case MODUL:
            case MULTI:
                Oper();
                Expr();
                break;
            default:
                jj_la1[51] = jj_gen;
                ;
        }
    }

    final public void PonerDato() throws ParseException {
        TipoDato();
        seleccionarValor2();
        CheckCompatibilidad();
        Expr2();
    }

    void CheckCompatibilidad() throws ParseException {
        logsAcumulatorInstance.getInstance().addSemanticLog(TA.checkAsing(valor1CompAsig, valor2CompAsig));
    }

    void seleccionarValor2() throws ParseException {
        valor2CompAsig = token;
    }

    void verificarExistencia() throws ParseException {
        if (!tableInstance.checkVariable(token.image)) {
            logsAcumulatorInstance.getInstance().addSemanticLog("Error: El identificador " + token.image + " No ha sido declarado \r\nLinea: " + token.beginLine);
        }
    }

    final public void ParentesisExpr() throws ParseException {
        jj_consume_token(PAREA);
        Expr();
        jj_consume_token(PAREC);
        Expr2();
    }

    final public void TipoDato() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ENTERO:
                jj_consume_token(ENTERO);
                break;
            case FLOTANTEDOUBLE:
                jj_consume_token(FLOTANTEDOUBLE);
                break;
            case CARACTER:
                jj_consume_token(CARACTER);
                break;
            case CADENA:
                jj_consume_token(CADENA);
                break;
            case TRUE:
                jj_consume_token(TRUE);
                break;
            case FALSE:
                jj_consume_token(FALSE);
                break;
            case VAR:
                jj_consume_token(VAR);
                break;
            default:
                jj_la1[52] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void TipoDatoComparacion() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ENTERO:
                jj_consume_token(ENTERO);
                break;
            case FLOTANTEDOUBLE:
                jj_consume_token(FLOTANTEDOUBLE);
                break;
            case CARACTER:
                jj_consume_token(CARACTER);
                break;
            case CADENA:
                jj_consume_token(CADENA);
                break;
            case VAR:
                jj_consume_token(VAR);
                break;
            default:
                jj_la1[53] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Declaracion() throws ParseException {
        try {
            Tipo();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CORA:
                    jj_consume_token(CORA);
                    jj_consume_token(ENTERO);
                    jj_consume_token(CORC);
                    break;
                default:
                    jj_la1[54] = jj_gen;
                    ;
            }
            Declarando();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ASIG:
                    DeclaracionAsignacion();
                    break;
                default:
                    jj_la1[55] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                DeclaracionTA();
                DeclaracionT();
            }
        }
    }

    final public void Declarando() throws ParseException {
        jj_consume_token(VAR);
        InsertarEnTablaDeVariables();
    }

    void InsertarEnTablaDeVariables() throws ParseException {
//JOptionPane.showMessageDialog(null,"Declarando: " + getNextTokenWithoutIncrease() + kindParaDeclarar);
        TA.InsertarSimbolo(token, kindParaDeclarar);
    }

    final public void DeclaracionAsignacion() throws ParseException {
        valor1CompAsig = token;
        try {
            jj_consume_token(ASIG);
            Expr();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en Inicializacion de variable, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            DeclaracionTA();
            DeclaracionT();
        }
    }

    final public void DeclaracionT() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHAR:
                case TRUE:
                case FALSE:
                case ENTERO:
                case FLOTANTEDOUBLE:
                case CADENA:
                case VAR:
                    Valor();
                    label_1:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case SUMA:
                            case RESTA:
                            case DIVIS:
                            case POTEN:
                            case MODUL:
                            case MULTI:
            ;
                                break;
                            default:
                                jj_la1[56] = jj_gen;
                                break label_1;
                        }
                        Oper();
                        Valor();
                    }
                    break;
                case PAREA:
                    Parea();
                    Valor();
                    label_2:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case SUMA:
                            case RESTA:
                            case DIVIS:
                            case POTEN:
                            case MODUL:
                            case MULTI:
            ;
                                break;
                            default:
                                jj_la1[57] = jj_gen;
                                break label_2;
                        }
                        Oper();
                        Valor();
                    }
                    Parec();
                    break;
                default:
                    jj_la1[58] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void DeclaracionTA() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHAR:
                case TRUE:
                case FALSE:
                case ENTERO:
                case FLOTANTEDOUBLE:
                case CADENA:
                case VAR:
                    Valor();
                    label_3:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case SUMA:
                            case RESTA:
                            case DIVIS:
                            case POTEN:
                            case MODUL:
                            case MULTI:
            ;
                                break;
                            default:
                                jj_la1[59] = jj_gen;
                                break label_3;
                        }
                        Oper();
                        Valor();
                    }
                    break;
                case PAREA:
                    Parea();
                    Valor();
                    label_4:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case SUMA:
                            case RESTA:
                            case DIVIS:
                            case POTEN:
                            case MODUL:
                            case MULTI:
            ;
                                break;
                            default:
                                jj_la1[60] = jj_gen;
                                break label_4;
                        }
                        Oper();
                        Valor();
                    }
                    Parec();
                    break;
                default:
                    jj_la1[61] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            DeclaracionTA1();
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                DeclaracionTA1();
            }
        }
    }

    final public void DeclaracionTA1() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PAREA:
                case COM:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COM:
                            jj_consume_token(COM);
                            Valor();
                            label_5:
                            while (true) {
                                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                    case SUMA:
                                    case RESTA:
                                    case DIVIS:
                                    case POTEN:
                                    case MODUL:
                                    case MULTI:
              ;
                                        break;
                                    default:
                                        jj_la1[62] = jj_gen;
                                        break label_5;
                                }
                                Oper();
                                Valor();
                            }
                            break;
                        case PAREA:
                            Parea();
                            Valor();
                            label_6:
                            while (true) {
                                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                    case SUMA:
                                    case RESTA:
                                    case DIVIS:
                                    case POTEN:
                                    case MODUL:
                                    case MULTI:
              ;
                                        break;
                                    default:
                                        jj_la1[63] = jj_gen;
                                        break label_6;
                                }
                                Oper();
                                Valor();
                            }
                            Parec();
                            DeclaracionTA1();
                            break;
                        default:
                            jj_la1[64] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[65] = jj_gen;
                    ;
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
            if (t.next != null) {
                t = getNextToken();
            }
            if (t.kind != GramaticaTokenManager.EOF) {
                DeclaracionTA1();
            }
        }
    }

    final public void ArregloD() throws ParseException {
        try {
            jj_consume_token(CORA);
            jj_consume_token(CORC);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"[]\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void ArregloL() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ENTERO:
                    jj_consume_token(ENTERO);
                    break;
                case VAR:
                    jj_consume_token(VAR);
                    break;
                default:
                    jj_la1[66] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(CORC);
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion de arreglo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Valor() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ENTERO:
                    jj_consume_token(ENTERO);
                    break;
                case FLOTANTEDOUBLE:
                    jj_consume_token(FLOTANTEDOUBLE);
                    break;
                case CHAR:
                    jj_consume_token(CHAR);
                    break;
                case CADENA:
                    jj_consume_token(CADENA);
                    break;
                case TRUE:
                    jj_consume_token(TRUE);
                    break;
                case FALSE:
                    jj_consume_token(FALSE);
                    break;
                case VAR:
                    jj_consume_token(VAR);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CORA:
                            jj_consume_token(CORA);
                            ArregloL();
                            break;
                        default:
                            jj_la1[67] = jj_gen;
                            ;
                    }
                    break;
                default:
                    jj_la1[68] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en asignacion de valor, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Oper() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SUMA:
                    jj_consume_token(SUMA);
                    break;
                case RESTA:
                    jj_consume_token(RESTA);
                    break;
                case DIVIS:
                    jj_consume_token(DIVIS);
                    break;
                case POTEN:
                    jj_consume_token(POTEN);
                    break;
                case MODUL:
                    jj_consume_token(MODUL);
                    break;
                case MULTI:
                    jj_consume_token(MULTI);
                    break;
                default:
                    jj_la1[69] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba un operador, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    final public void Z() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TRUE:
                jj_consume_token(TRUE);
                break;
            case FALSE:
                jj_consume_token(FALSE);
                break;
            case VAR:
                Var();
                break;
            default:
                jj_la1[70] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void X() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ENTERO:
                jj_consume_token(ENTERO);
                X1();
                break;
            case VAR:
                Var();
                X1();
                break;
            case PAREA:
                Parea();
                X();
                Parec();
                X1();
                break;
            default:
                jj_la1[71] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void X1() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SUMA:
            case RESTA:
            case DIVIS:
            case POTEN:
            case MODUL:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case SUMA:
                        jj_consume_token(SUMA);
                        X();
                        X1();
                        break;
                    case RESTA:
                        jj_consume_token(RESTA);
                        X();
                        X1();
                        break;
                    case DIVIS:
                        jj_consume_token(DIVIS);
                        X();
                        X1();
                        break;
                    case POTEN:
                        jj_consume_token(POTEN);
                        X();
                        X1();
                        break;
                    case MODUL:
                        jj_consume_token(MODUL);
                        X();
                        X1();
                        break;
                    default:
                        jj_la1[72] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[73] = jj_gen;
                ;
        }
    }

    final public void Y() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FLOTANTEDOUBLE:
                jj_consume_token(FLOTANTEDOUBLE);
                Y1();
                break;
            case VAR:
                Var();
                Y1();
                break;
            case PAREA:
                Parea();
                Y();
                Parec();
                Y1();
                break;
            default:
                jj_la1[74] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Y1() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SUMA:
                jj_consume_token(SUMA);
                Y();
                Y1();
                break;
            case RESTA:
                jj_consume_token(RESTA);
                Y();
                Y1();
                break;
            case DIVIS:
                jj_consume_token(DIVIS);
                Y();
                Y1();
                break;
            case POTEN:
                jj_consume_token(POTEN);
                Y();
                Y1();
                break;
            case MODUL:
                jj_consume_token(MODUL);
                Y();
                Y1();
                break;
            default:
                jj_la1[75] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Declaracionfor() throws ParseException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INT:
                    jj_consume_token(INT);
                    Var();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CORA:
                            jj_consume_token(CORA);
                            ArregloL();
                            break;
                        default:
                            jj_la1[76] = jj_gen;
                            ;
                    }
                    jj_consume_token(ASIG);
                    X();
                    break;
                case DOUBLE:
                    jj_consume_token(DOUBLE);
                    Var();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CORA:
                            jj_consume_token(CORA);
                            ArregloL();
                            break;
                        default:
                            jj_la1[77] = jj_gen;
                            ;
                    }
                    jj_consume_token(ASIG);
                    Y();
                    break;
                case FLOAT:
                    jj_consume_token(FLOAT);
                    Var();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case CORA:
                            jj_consume_token(CORA);
                            ArregloL();
                            break;
                        default:
                            jj_la1[78] = jj_gen;
                            ;
                    }
                    jj_consume_token(ASIG);
                    Y();
                    break;
                default:
                    jj_la1[79] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException e) {
            Token t = getToken(0);
            if (t.image == ";"
                    | t.image == "{"
                    | t.image == "}"
                    | t.image == null) {
                t = getNextToken();
            }
            logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion de variable de ciclo for, linea: " + t.beginLine + ", columna: " + t.beginColumn);
            if (t.image == "\n") {
                linea = linea + 1;
            }
            if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}") {
                do {
                    t = getNextToken();
                } while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
            }
        }
    }

    /**
     * Generated Token Manager.
     */
    public GramaticaTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[80];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x20000000, 0xf8000, 0x1800, 0x1800, 0xf8000, 0x80f8000, 0x80f9800, 0x0, 0x0, 0xf8000, 0x0, 0x80f8000, 0x0, 0x80f8000, 0x0, 0x80f8000, 0x1800, 0x8000000, 0xf8000, 0xf8000, 0x0, 0xf8000, 0x0, 0xf8000, 0x9fc140, 0x9fc140, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8000, 0x4100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0xc0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0000000, 0x0, 0xc0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0008000, 0x0, 0x0, 0xc0008000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0008000, 0x0, 0xc0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x10, 0x0, 0x0, 0x10, 0x10, 0x10, 0x200, 0x40000000, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x0, 0x10, 0x10, 0x8, 0x10, 0x8000, 0x10, 0x13, 0x13, 0x200, 0x800, 0x800, 0x200, 0x800, 0x8000, 0x10, 0x0, 0x30000000, 0x200, 0x0, 0x200, 0x4, 0x0, 0x0, 0x880, 0x8000000, 0x6000000, 0x6000000, 0x1f80000, 0x200, 0x800, 0x0, 0x70000000, 0x800, 0x0, 0x0, 0x0, 0x200, 0x40000000, 0x0, 0x0, 0x800, 0x0, 0x0, 0x800, 0x0, 0x0, 0x8800, 0x8800, 0x0, 0x200, 0x0, 0x0, 0x0, 0x800, 0x0, 0x0, 0x800, 0x0, 0x200, 0x200, 0x200, 0x10,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x0, 0x0, 0x0, 0x400000, 0x40000, 0x40000, 0x0, 0x0, 0x0, 0x40000, 0x0, 0x400000, 0x0, 0x400000, 0x0, 0x0, 0x400000, 0x0, 0x0, 0x400000, 0x0, 0x0, 0x0, 0x600000, 0x600000, 0x0, 0x3b0000, 0x3b0000, 0x0, 0x3b0000, 0x0, 0x200000, 0x0, 0x0, 0x0, 0x200000, 0x0, 0x0, 0x390000, 0x0, 0x0, 0x3b0000, 0x0, 0x0, 0x0, 0x0, 0x230000, 0x1f0, 0x0, 0x3b0000, 0x3f0, 0x3b0000, 0x3b0000, 0x0, 0x0, 0x3f0, 0x3f0, 0x330000, 0x3f0, 0x3f0, 0x330000, 0x3f0, 0x3f0, 0x0, 0x0, 0x210000, 0x0, 0x330000, 0x3f0, 0x200000, 0x210000, 0x1f0, 0x1f0, 0x220000, 0x1f0, 0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    /**
     * Constructor with InputStream.
     */
    public Gramatica(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public Gramatica(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new GramaticaTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 80; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 80; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor.
     */
    public Gramatica(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new GramaticaTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 80; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 80; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public Gramatica(GramaticaTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 80; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(GramaticaTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 80; i++) {
            jj_la1[i] = -1;
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List jj_expentries = new java.util.ArrayList();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[99];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 80; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 99; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

}
