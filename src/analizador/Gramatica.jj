/**
 *
 * @author TeamPotato:)
 */


options
{
  IGNORE_CASE = false;
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(Gramatica)
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador;
import analizador.TokenAsignaciones;
import analizador.TokenComparaciones;
import javax.swing.JOptionPane;
import extraObjects.logsAcumulatorInstance;
import extraObjects.typeTableInstance;

public class Gramatica
{
  TokenAsignaciones TA = new TokenAsignaciones();
  TokenComparaciones TC = new TokenComparaciones ();
  
  logsAcumulatorInstance logsInstance = logsAcumulatorInstance.getInstance();

  public String expresionInfija = "";

  public static int linea = 1;

  public static int la;
  String muestraLexico = "";
  int kindParaDeclarar = 0;
  Token valor1CompAsig = null;
  Token valor2CompAsig = null;

  Token valor1CompComp = null;
  Token valor2CompComp = null;

typeTableInstance tableInstance = typeTableInstance.getInstance();
 
  final public Token getNextTokenWithoutIncrease() {
    if (token.next != null) token = token.next;
    else{
        GramaticaTokenManager token_source2 = token_source;
        token = token.next = token_source2.getNextToken();
    }
    return token;
  }

  
}

PARSER_END(Gramatica)

/** Lexico */
<* >
SKIP :
{
  " "
| "\t"
| "\r"
}

< SALTO >
SKIP :
{
  "\n"
  {
    Gramatica.linea++;
  }
}

< DEFAULT >
TOKEN :
{
  < ENTER : "\n" >
  {
    Gramatica.linea++;
  }
}

/** ---------- Palabras reservadas ---------- */
<* >
TOKEN :
{
  < IF : "If" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < ELSE : "Else" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < WHILE : "While" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < CLASS : "class" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < PACK : "Pack" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < PUBLIC : "public" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < PRIVATE : "private" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < BREAK : "break" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < DO : "do" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < CHAR : "char" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < STRING : "string" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < INT : "int" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < FLOAT : "float" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < BOOLEAN : "boolean" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < TRY : "Try" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < CATCH : "Catch" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < SUPER : "Super" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < THIS : "this" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < DERIVATE : "Derivate" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < RETURN : "return" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < FINAL : "Final" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < VOID : "void" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < NULL : "null" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < IMPORT : "import" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < TRUE : "true" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < FALSE : "false" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < FOR : "For" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < SWITCH : "Switch" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < CASE : "Case" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < PRINMAIN : "principalMain" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < DOUBLE : "double" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < EXCEPT : "Except" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
| < DEF : "Default" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Palabra reservada " + "\n");
  }
  : DEFAULT
}

/** ---------- Tokens fijos ---------- */
<* >
TOKEN :
{
  < LLAVA : "{" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : SALTO
| < LLAVC : "}" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : SALTO
| < CORA : "[" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : DEFAULT
| < CORC : "]" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : DEFAULT
| < PAREA : "(" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : DEFAULT
| < PAREC : ")" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : DEFAULT
| < PYC : ";" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : SALTO
| < COMSIM : "'" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : DEFAULT
| < COM : "," >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : DEFAULT
| < PUNT : "." >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : DEFAULT
| < GUIONB : "_" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : DEFAULT
| < DOSP : ":" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Token fijo " + "\n");
  }
  : SALTO
}

/** ---------- Operadores relacionales ---------- */
<* >
TOKEN :
{
  < MAYORQ : ">" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador relacional " + "\n");
  }
  : DEFAULT
| < MENORQ : "<" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador relacional " + "\n");
  }
  : DEFAULT
| < MAYORI : ">=" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador relacional " + "\n");
  }
  : DEFAULT
| < MENORI : "<=" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador relacional " + "\n");
  }
  : DEFAULT
| < IGUALI : "==" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador relacional " + "\n");
  }
  : DEFAULT
| < DIFER : "<>" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador relacional " + "\n");
  }
  : DEFAULT
}

/** ---------- Operadores lógicos ---------- */
<* >
TOKEN :
{
  < AND : "AND" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador l\u00f3gico " + "\n");
  }
  : DEFAULT
| < OR : "OR" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador l\u00f3gico " + "\n");
  }
  : DEFAULT
| < NOT : "NOT" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador l\u00f3gico " + "\n");
  }
  : DEFAULT
}

/** ---------- Operadores incrementales ---------- */
<* >
TOKEN :
{
  < INCRE : "++" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador incremental " + "\n");
  }
  : DEFAULT
| < DECRE : "--" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador incremental " + "\n");
  }
  : DEFAULT
}

/** ---------- Operadores de asignación ---------- */
<* >
TOKEN :
{
  < ASIG : "=" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador de asignaci\u00f3n " + "\n");
  }
  : DEFAULT
| < SUMASIG : "+=" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador de asignaci\u00f3n " + "\n");
  }
  : DEFAULT
| < RESASIG : "-=" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador de asignaci\u00f3n " + "\n");
  }
  : DEFAULT
| < MULASIG : "*=" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador de asignaci\u00f3n " + "\n");
  }
  : DEFAULT
| < DIVASIG : "/=" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador de asignaci\u00f3n " + "\n");
  }
  : DEFAULT
| < MODASIG : "%=" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador de asignaci\u00f3n " + "\n");
  }
  : DEFAULT
}

/** ---------- Operadores aritmeticos ---------- */
<* >
TOKEN :
{
  < SUMA : "+" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador aritmetico " + "\n");
  }
  : DEFAULT
| < RESTA : "-" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador aritmetico " + "\n");
  }
  : DEFAULT
| < DIVIS : "/" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador aritmetico " + "\n");
  }
  : DEFAULT
| < POTEN : "^" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador aritmetico " + "\n");
  }
  : DEFAULT
| < MODUL : "%" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador aritmetico " + "\n");
  }
  : DEFAULT
| < MULTI : "*" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Operador aritmetico " + "\n");
  }
  : DEFAULT
}

/** ---------- Variables, clases, paquetes y otros... ---------- */
<* >
TOKEN :
{
  < #letraMay : [ "A"-"Z" ] >
| < #letraMin : [ "a"-"z" ] >
| < #c : [ "a"-"z", "A"-"Z", "0"-"9", "|", "'", "/", "(", ")", "{", "}", "[", "]", ",", ".", ";", "_", ":", " ", "<", ">", "+", "-", "*", "=" ] >
| < #cinv : [ "a"-"z", "A"-"Z", "0"-"9", "|", "'", "(", "{", "}", "[", ",", ".", "_", "<", ">", "-", "=" ] >
| < #c2 : [ "@", "#", "&", "%" ] >
| < #digito : [ "0"-"9" ] >
| < ENTERO : (< digito >)+ >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Numero entero " + "\n");
    //logsAcumulatorInstance.getInstance().addComponenteExpresionInfija(image.toString());
    //JOptionPane.showMessageDialog(null,image);
  }
  : DEFAULT
| < FLOTANTEDOUBLE :
    (
      (< digito >)+ "." (< digito >)+
    )+ >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Numero flotante " + "\n");
  }
  : DEFAULT
| < CLASES : < letraMay > (< letraMin >)+ >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Nombre de clase " + "\n");
  }
  : DEFAULT
| < CARACTER :
    "'"
    (
      < letraMay >
    | < letraMin >
    | < digito >
    )
    "'" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Caracter " + "\n");
  }
  : DEFAULT
| < CADENA : "\"" (< c >)* "\"" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Cadena " + "\n");
  }
  : DEFAULT
| < VAR : (< letraMin >)+ >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Nombre de variable " + "\n");
  }
  : DEFAULT
| < FUNC :
    (< letraMin >)+
    (
      < letraMay > (< letraMin >)+
    )+ >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Nombre de funci\u00f3n " + "\n");
  }
  : DEFAULT
| < LIBR :
    (< letraMin >)+
    (  
      "_"
      (
        < letraMin >
      | < letraMay >
      )+
    )+ >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Nombre de libreria " + "\n");
  }
  : DEFAULT
| < ENTEROINV :
    (< digito >)+ (< cinv >)+
    (
      < cinv >
    | < digito >
    )* >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Numero entero invalido " + "\n");
  }
  : DEFAULT
| < FLOTDOBINV :
    < digito >
    (
      (
        < digito >
      | < cinv >
      )+
      "." < digito > (< digito > < c >)
    )+ >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Numero flotante/decimal invalido " + "\n");
  }
  : DEFAULT
| < CADENAINV :
    "\""
    (
      < c >
    | < c2 >
    )+
    "\"" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Cadena invalida " + "\n");
  }
  : DEFAULT
}

/** ---------- Caracteres no validos ---------- */
<* >
TOKEN :
{
  < A : "\u00aa" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Car\u00e1cter no valido " + "\n");
  }
  : DEFAULT
| < GRADOS : "\u00ba" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Car\u00e1cter no valido " + "\n");
  }
  : DEFAULT
| < CPOR : "\u00e7" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Car\u00e1cter no valido " + "\n");
  }
  : DEFAULT
| < PUNTOS : "\u00a8" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Car\u00e1cter no valido " + "\n");
  }
  : DEFAULT
| < ACENTOI : "`" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Car\u00e1cter no valido " + "\n");
  }
  : DEFAULT
| < ACENTO : "\u00b4" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Car\u00e1cter no valido " + "\n");
  }
  : DEFAULT
| < BARRAI : "\\" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Car\u00e1cter no valido " + "\n");
  }
  : DEFAULT
| < ARROBA : "@" >
  {
    logsAcumulatorInstance.getInstance().addlexicLog(image + " -> Car\u00e1cter no valido " + "\n");
  }
  : DEFAULT
}

/** Fin Lexico */


/**Inicio sintactico*/

void Inicio() :
{
  TA.SetTables();
  TC.SetTables();
}
{
  try
  {
    Import() Clases() < EOF >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en definicion de import o clase general");
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Cuerpo();
    }
  }
}

void Import() :
{}
{
  (
    < IMPORT > Import1()
  )?
}

void Import1() :
{}
{
  try
  {
    < LIBR > Puntoyc() Import()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en nombre de libreria, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Import();
    }     
  }
}

void Puntoyc() :
{}
{
  try
  {
    < PYC >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \";\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Tipo() :
{}
{
  try
  {
    DeclararInt()
  | DeclararChar()
  | DeclararString()
  | DeclararBool()
  | DeclararFloat()
  | DeclararDouble()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void DeclararInt() :
{
  kindParaDeclarar = GramaticaConstants.INT;
}
{
  try
  {
    < INT >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void DeclararChar() :
{
  kindParaDeclarar = GramaticaConstants.CHAR;
}
{
  try
  {
    < CHAR >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void DeclararString() :
{
  kindParaDeclarar = GramaticaConstants.STRING;
}
{
  try
  {
    < STRING >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void DeclararBool() :
{
  kindParaDeclarar = GramaticaConstants.BOOLEAN;
}
{
  try
  {
    < BOOLEAN >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void DeclararFloat() :
{
  kindParaDeclarar = GramaticaConstants.FLOAT;
}
{
  try
  {
    < FLOAT >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}



void DeclararDouble() :
{
  kindParaDeclarar = GramaticaConstants.DOUBLE;
}
{
  try
  {
    < DOUBLE >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba tipo de dato, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void TipoEncapsular() :
{}
{
  try
  {
    < PUBLIC >
  | < PRIVATE >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se espereba \"public\" o \"private\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Clasesn() :
{}
{
  try
  {
    < CLASES >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en nombre de clase, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Clases() :
{}
{
  try
  {
    TipoEncapsular() < CLASS > Clasesn() Llavea() ContenidoClase() Llavec() 
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    if (t.beginColumn != 1)
    {
      logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"class\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    }
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      ContenidoClase(); 
    }
  }
}

void Llavea() :
{}
{
  try
  {
    < LLAVA >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"{\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Llavec() :
{}
{
  try
  {
    < LLAVC >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"}\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void ContenidoClase() :
{}
{ 
  try
  {
    (((TipoEncapsular())? ( Tipo() (Declaracion() Puntoyc() | Metodo() ) | Constructor() | Metodo_void() )) ContenidoClase()) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en contenido de clase, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    la = t.beginLine;
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Constructor();
      Cuerpo();
    }
  }
}

void DeclaracionGlobal() :
{
}
{
  try
  {
    (< CORA > < ENTERO > < CORC >)? Declarando() (DeclaracionAsignacion())?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      DeclaracionTA();
      DeclaracionT();
    }
  } 
}

void Parea() :
{}
{
  try
  {
    < PAREA >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"(\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Parec() :
{}
{
  try
  {
    < PAREC >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \")\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Constructor() :
{}
{
  try
  {
    Clasesn() Parea() (Argumentos())? Parec() Llavea() Sentencia() Llavec()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en constructor, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Sentencia();
      ConstructorA();
    }
  }
}

void ConstructorA() :
{}
{
  try
  {
    TipoEncapsular() (Cuerpo()
  | (Clasesn() Parea() Argumentos() Parec() Llavea() Sentencia() Llavec() ConstructorA()) ?)
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en constructor, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Cuerpo();
      Argumentos();
      Sentencia();
      ConstructorA();
    }
  }
}

void Void() :
{}
{
  try
  {
    < VOID >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"void\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Cuerpo() :
{}
{
  try
  {
    Tipo() (Metodo()
  | Variables_clase()) CuerpoA()
  | Void() MetodosA()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"void\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Metodo();
      MetodosA();
    }
  }
}

void CuerpoA() :
{}
{
  (
    TipoEncapsular()
    (
      Tipo()
      (
        Metodo()
      | Variables_clase()
      )
    | Void() MetodosA()
    )
  )?
}

void MetodosA() :
{}
{
  try
  {
    Func() Metodo_void() CuerpoA()
  | Principal() CuerpoA()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en metodo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Metodo_void();
      CuerpoA();
      Principal();
      CuerpoA();
    }
  }
}

void Prinmain() :
{}
{
  try
  {
    < PRINMAIN >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"principalMain\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Metodo_void();
      CuerpoA();
      Principal();
      CuerpoA();
    }
  }
}

void Principal() :
{}
{
  try
  {
    Void() Prinmain() Parea() Parec() Llavea() Sentencia() Llavec()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en metodo principal, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Func() :
{}
{
  try
  {
    < FUNC >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en nombre de funcion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Metodo() :
{}
{
  try
  {
    Func() Parea() (Argumentos())? Parec() Llavea() Sentencia() Retorno() Llavec()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en metodo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Argumentos();
      Sentencia();
      Retorno();
    }
  }
}

void Return() :
{}
{
  try
  {
    < RETURN >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"return\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Retorno() :
{}
{
  try
  {
    Return() Tipo_retorno()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en retorno, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Tipo_retorno();     
    }
  }
}

void Tipo_retorno() :
{}
{
  Valor() Puntoyc()
}

void Metodo_void() :
{}
{
  try
  {
     Void() (Func() Parea() (Argumentos())? | Prinmain() Parea()) Parec() Llavea() Sentencia() Llavec()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en metodo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Argumentos(); 
      Sentencia();
      Cuerpo();
    }
  }
}

void Argumentos() :
{}
{
  try
  {
    Declaracion() ArgumentosA()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en argumentos, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Declaracion();
      ArgumentosA();
    }
  }
}

void ArgumentosA() :
{}
{
  (
    < COM > (Argumentos())?
  )?
}

void Variables_clase() :
{}
{
  try
  {
    (Declaracion() Puntoyc() Variables_clase()) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en variables de clase, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Variables_clase();
    }
  }
}

void Sentencia() :
{}
{
  try
  {
    (< FOR > Sentencia_ciclofor() Sentencia()
  | < IF > Sentencia_condicion() Sentencia()
  | Declaracion() Puntoyc() Sentencia()
  | Asignacion() Puntoyc() Sentencia()
  | < SWITCH > Sentencia_switch() Sentencia()
  | < TRY > Sentencia_try() Sentencia()
  | < THIS > Sentencia_this() Sentencia()
  | Sentencia_ciclowhile() Sentencia()
  | Func() SentenciaLlamarMetodo() Sentencia()) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en sentencia, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Sentencia();
    }
  }
}

void Parametros() :
{}
{
  try
  {
    (Var() (< CORA > ArregloL()) ? Parametros2()
  | Exp()
  | < CADENA > Parametros2()
  | < CARACTER > Parametros2()) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en parametros, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Parametros2();
    }
  }
}

void Parametros2() :
{}
{
  try
  {
    (< COM > (Var() (< CORA > ArregloL()) ? Parametros2()
  | Exp()
  | < CADENA > Parametros2()
  | < CARACTER > Parametros2())) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en parametros, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Parametros2();
    }
  }
}

void SentenciaLlamarMetodo() :
{}
{
  try
  {
    Parea() Parametros() Parec() Puntoyc()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en llamado de metodo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Parametros();
    }
  }
}

void Except() :
{}
{
  try
  {
    < EXCEPT >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"Except\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Catch() :
{}
{
  try
  {
    < CATCH >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"Catch\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Sentencia_try() :
{}
{
  try
  {
    Llavea() Sentencia() Llavec() Catch() Parea() Except() Var() Parec() Llavea() Sentencia() Llavec()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en try-catch, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Catch();
      Sentencia();
    }
  }
}

void Sentencia_ciclofor() :
{}
{
  try
  {
    Parea() (Declaracion() | Asignacion()) Puntoyc() ExpresionBooleana() Puntoyc() Asignacion() Parec() Llavea() Sentencia() Llavec()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en ciclo for, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Sentencia();
    }
  }
}

void While() :
{}
{
  try
  {
    < WHILE >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"While\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Do() :
{}
{
  try
  {
    < DO >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"Do\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Sentencia_ciclowhile() :
{}
{
  try
  {
    While() Parea() ExpresionBooleana() Parec() Llavea() Sentencia() Llavec()
  | Do() Llavea() Sentencia() Llavec() While() Parea() ExpresionBooleana() Parec() Puntoyc()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en ciclo while, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Sentencia();
    }
  }
}

void Sentencia_condicion() :
{}
{
  try
  {
    Parea() ExpresionBooleana() Parec() Llavea() Sentencia() Llavec() Si_e()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Sentencia();
      Si_e();
    }
  }
}

void Sentencia_incremental() :
{}
{
  try
  {
    < INCRE >
  | < DECRE >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"++\" o \"--\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Sentencia_this() :
{}
{
  try
  {
    (< VAR > < ASIG > Var() (< CORA > ArregloL()) ? Puntoyc() Sentencia_this()) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Sentencia_this();
    }
  }
}

void Break() :
{}
{
  try
  {
    < BREAK >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"break\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Sentencia_switch() :
{}
{
  try
  {
    Var() (< CORA > ArregloL()) ? Llavea() Case() < DEF > < DOSP > Sentencia() Break() Puntoyc() Llavec()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en sentencia switch, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Sentencia_switch();
      Sentencia();
    }
  }
}

void Cases() :
{}
{
  try
  {
    < CASE >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"Case\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Dosp() :
{}
{
  try
  {
    < DOSP >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \":\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Case() :
{}
{
  (
    Cases() Caso() Dosp() Sentencia() Break() Puntoyc() Case()
  )?
}

void Caso() :
{}
{
  try
  {
    < ENTERO >
  | < CADENA >
  | < CARACTER >
  | Var()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en sentencia caso, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Si_e() :
{}
{
  (
    < ELSE > Si_EA()
  )?
}

void Si_EA() :
{}
{
  try
  {
    Llavea() Sentencia() Llavec()
  | Sentencia_condicion()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en else, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Sentencia();
      Sentencia_condicion();
    }
  }
}

void ExpresionBooleana() :
{}
{
  try
  {
    ( Comparacion() | < TRUE > | < FALSE> | (< NOT > ExpresionBooleana()) ) CondgA()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      ExpresionBooleana();
      OperadoresRelacionales();
    }
  }
}

JAVACODE
void colocacionDatoParaComparacion1() 
{
    valor1CompComp = token;
}

JAVACODE
void colocacionDatoParaComparacion2()
{
    valor2CompComp = token;
    logsInstance.addSemanticLog(TC.checkAsing(valor1CompComp, valor2CompComp));
}


void Comparacion() :
{}
{
  try
  {
    TipoDatoComparacion() colocacionDatoParaComparacion1() OperadoresRelacionales() TipoDatoComparacion() colocacionDatoParaComparacion2()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      ExpresionBooleana();
      OperadoresRelacionales();
    }
  }
}

void CondgA() :
{}
{
  try
  {
    (< AND > ExpresionBooleana() CondgA() | < OR > ExpresionBooleana() CondgA()) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Exp();
    }
  }
}

void OperadoresRelacionales() :
{}
{
  try
  {
    < MAYORQ >
  | < MENORQ >
  | < MAYORI >
  | < MENORI >
  | < IGUALI >
  | < DIFER >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Exp();
    }
  }
}

void Exp() :
{}
{
  try
  {
    Parea() Exp() Parec() ExpA()
  | < VAR > (< CORA > ArregloL()) ? ExpA()
  | < ENTERO > ExpA()
  | < FLOTANTEDOUBLE > ExpA()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      ExpA();
    }
  }
}

void ExpA() :
{}
{
  try
  {
    < SUMA > Exp()
  | < RESTA > Exp()
  | < DIVIS > Exp()
  | < POTEN > Exp()
  | < MODUL > Exp()
  | Parametros()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en condicion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      Parametros();
    }
  }
}

void Var() :
{}
{
  try
  {
    < VAR >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en nombre de variable, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  } 
}

void Asignacion() :
{
}
{
  < VAR > agregarAExpresionInfija(token) verificarExistencia()
  (
    Asignacion2()
  | Sentencia_incremental()
  )
}

void Asignacion2() :
{
valor1CompAsig = token;
}
{
  
    < ASIG > agregarAExpresionInfija(token) Expr()
}

void Expr() :
{
}
{
  PonerDato()
| ParentesisExpr()
}

void Expr2() :
{
}
{
  (
    (Oper() Expr())
  ) | mandarAConvertirYRestablecerExpresionInfija()
}

JAVACODE
void mandarAConvertirYRestablecerExpresionInfija()
{
logsAcumulatorInstance.getInstance().addComponenteExpresionInfija(expresionInfija);
expresionInfija = "";

}

JAVACODE

void restablecerExpresionInfija(){
expresionInfija = "";
}

void PonerDato() :
{}
{
  TipoDato() seleccionarValor2() CheckCompatibilidad() Expr2()
}

JAVACODE
void CheckCompatibilidad()
{
logsAcumulatorInstance.getInstance().addSemanticLog(TA.checkAsing(valor1CompAsig,valor2CompAsig));
}

JAVACODE
void seleccionarValor2()
{
valor2CompAsig = token;
}

JAVACODE
void verificarExistencia()
{
if(!tableInstance.checkVariable(token.image)){
    logsAcumulatorInstance.getInstance().addSemanticLog("Error: El identificador " + token.image + " No ha sido declarado \r\nLinea: " + token.beginLine);
}
}

JAVACODE
void agregarAExpresionInfija(Token valor){
    if(expresionInfija!=null){
       expresionInfija += valor.toString();
    }else{
        expresionInfija = valor.toString();
    }
//JOptionPane.showMessageDialog(null,token);
}

void ParentesisExpr() :
{}
{
  < PAREA > Expr() < PAREC > Expr2()
}

void TipoDato() :
{
}
{
  (< ENTERO > 
| < FLOTANTEDOUBLE > 
| < CARACTER >
| < CADENA >
| < TRUE >
| < FALSE >
| < VAR >) agregarAExpresionInfija(token)
}

void TipoDatoComparacion() :
{
}
{
  < ENTERO >
| < FLOTANTEDOUBLE >
| < CARACTER >
| < CADENA >
| < VAR >
}

void Declaracion() :
{
}
{
  try
  {
    Tipo() (< CORA > < ENTERO > < CORC >)? Declarando() (DeclaracionAsignacion() | restablecerExpresionInfija())
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      DeclaracionTA();
      DeclaracionT();
    }
  } 
}

void Declarando() :
{} 
{
  < VAR > agregarAExpresionInfija(token) InsertarEnTablaDeVariables()
}

JAVACODE
void InsertarEnTablaDeVariables()
{
//JOptionPane.showMessageDialog(null,"Declarando: " + getNextTokenWithoutIncrease() + kindParaDeclarar);
TA.InsertarSimbolo(token, kindParaDeclarar);
}

void DeclaracionAsignacion() :
{
  valor1CompAsig = token;
}
{
  try
  {
    < ASIG > agregarAExpresionInfija(token) Expr()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en Inicializacion de variable, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    DeclaracionTA();
    DeclaracionT();
  } 
}

void DeclaracionT() :
{}
{
  try
  {
    (Valor() (Oper() Valor()) *)
  | (Parea() Valor() (Oper() Valor()) * Parec())
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void DeclaracionTA() :
{}
{
  try
  {
    ((Valor() (Oper() Valor()) *)
  | (Parea() Valor() (Oper() Valor()) * Parec())) DeclaracionTA1()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      DeclaracionTA1();
    }
  }
}

void DeclaracionTA1() :
{}
{
  try
  {
    (< COM > (Valor() (Oper() Valor()) *)
  | (Parea() Valor() (Oper() Valor()) * Parec()) DeclaracionTA1()) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
    if (t.next != null)
    {
      t = getNextToken();
    }
    if (t.kind != GramaticaTokenManager.EOF)
    {
      DeclaracionTA1();
    }
  }
}

void ArregloD() :
{}
{
  try
  {
    < CORA > < CORC >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba \"[]\", linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void ArregloL() :
{}
{
  try
  {
    ((< ENTERO >)
  | (< VAR >)
    ) < CORC >
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion de arreglo, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Valor() :
{}
{
  try
  {
    < ENTERO >
  | < FLOTANTEDOUBLE >
  | < CHAR >
  | < CADENA >
  | < TRUE >
  | < FALSE >
  | < VAR > (< CORA > ArregloL()) ?
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en asignacion de valor, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Oper() :
{}
{
  try
  {
   ( < SUMA >
  | < RESTA >
  | < DIVIS >
  | < POTEN >
  | < MODUL >
  | < MULTI > ) agregarAExpresionInfija(token)
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Se esperaba un operador, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}

void Z() :
{}
{
  < TRUE >
| < FALSE >
| Var()
}

void X() :
{}
{
  < ENTERO > X1()
| Var() X1()
| Parea() X() Parec() X1()
}

void X1() :
{}
{
  (
    < SUMA > X() X1()
  | < RESTA > X() X1()
  | < DIVIS > X() X1()
  | < POTEN > X() X1()
  | < MODUL > X() X1()
  )?
}

void Y() :
{}
{
  < FLOTANTEDOUBLE > Y1()
| Var() Y1()
| Parea() Y() Parec() Y1()
}

void Y1() :
{}
{
  < SUMA > Y() Y1()
| < RESTA > Y() Y1()
| < DIVIS > Y() Y1()
| < POTEN > Y() Y1()
| < MODUL > Y() Y1()
}

void Declaracionfor() :
{}
{
  try
  {
    < INT > Var() (< CORA > ArregloL()) ? < ASIG > X()
  | < DOUBLE > Var() (< CORA > ArregloL()) ? < ASIG > Y()
  | < FLOAT > Var() (< CORA > ArregloL()) ? < ASIG > Y()
  }
  catch (ParseException e)
  {
    Token t = getToken(0);
    if (t.image == ";"
  | t.image == "{"
  | t.image == "}"
  | t.image == null)
    {
      t = getNextToken();
    }
    logsAcumulatorInstance.getInstance().addSintacticLog("Error en declaracion de variable de ciclo for, linea: " + t.beginLine + ", columna: " + t.beginColumn);
    if (t.image == "\n")
    {
      linea = linea + 1;
    }
    if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
    {
      do
      {
        t = getNextToken();
      }
      while (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
    }
  }
}
