options {
  IGNORE_CASE = false;
  STATIC = false;
  UNICODE_INPUT=true;
}

PARSER_BEGIN(Gramatica)
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador; 
import analizador.TokenAsignaciones;
import javax.swing.JOptionPane;
public class Gramatica {
    TokenAsignaciones TA = new TokenAsignaciones();
    public static int linea=1;
    public static int la;
    String muestraLexico = "";
}
PARSER_END(Gramatica)

/** Lexico */
	<*>SKIP : {
      " "
    | "\t"
	| "\r"
}

<SALTO> SKIP:{"\n" {Gramatica.linea++;}}

<DEFAULT> TOKEN: {
    < ENTER : "\n" > {Gramatica.linea++;}}


/** ---------- Palabras reservadas ---------- */
<*>TOKEN : {
      < IF : "If" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < ELSE: "Else" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < WHILE: "While" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < CLASS: "class" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < PACK: "Pack" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < PUBLIC: "public" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < PRIVATE: "private" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < BREAK: "break" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < DO: "do" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < CHAR: "char" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < STRING: "string" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < INT: "int" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < FLOAT: "float" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < BOOLEAN: "boolean" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < TRY: "Try" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < CATCH: "Catch" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < SUPER: "Super" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < THIS: "this" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < DERIVATE: "Derivate" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < RETURN: "return" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < FINAL: "Final" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < VOID: "void" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < NULL: "null" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < IMPORT: "import" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < TRUE: "true" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < FALSE: "false" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < FOR: "For" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < SWITCH: "Switch" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < CASE: "Case" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < PRINMAIN: "principalMain" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < DOUBLE: "double" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < EXCEPT: "Except" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
    | < DEF: "Default" > {System.out.println(image + " -> Palabra reservada " + "\n");} : DEFAULT
}
    




/** ---------- Tokens fijos ---------- */
<*>TOKEN : {
     < LLAVA: "{" > {System.out.println(image + " -> Token fijo " + "\n");} : SALTO
    | < LLAVC: "}" > {System.out.println(image + " -> Token fijo " + "\n");} : SALTO
    | < CORA: "[" > {System.out.println(image + " -> Token fijo " + "\n");} : DEFAULT
    | < CORC: "]" > {System.out.println(image + " -> Token fijo " + "\n");} : DEFAULT
    | < PAREA: "(" > {System.out.println(image + " -> Token fijo " + "\n");} : DEFAULT
    | < PAREC: ")" > {System.out.println(image + " -> Token fijo " + "\n");} : DEFAULT
    | < PYC: ";" > {System.out.println(image + " -> Token fijo " + "\n");} : SALTO
    | < COMSIM: "'" > {System.out.println(image + " -> Token fijo " + "\n");} : DEFAULT
    | < COM: "," > {System.out.println(image + " -> Token fijo " + "\n");} : DEFAULT
    | < PUNT: "." > {System.out.println(image + " -> Token fijo " + "\n");} : DEFAULT
    | < GUIONB: "_" > {System.out.println(image + " -> Token fijo " + "\n");} : DEFAULT
    | < DOSP: ":" > {System.out.println(image + " -> Token fijo " + "\n");} : SALTO
}



/** ---------- Operadores relacionales ---------- */
<*>TOKEN : {
      < MAYORQ : ">" > {System.out.println(image + " -> Operador relacional " + "\n");} : DEFAULT
    | < MENORQ: "<" > {System.out.println(image + " -> Operador relacional " + "\n");} : DEFAULT
    | < MAYORI: ">=" > {System.out.println(image + " -> Operador relacional " + "\n");} : DEFAULT
    | < MENORI: "<=" > {System.out.println(image + " -> Operador relacional " + "\n");} : DEFAULT
    | < IGUALI: "==" > {System.out.println(image + " -> Operador relacional " + "\n");} : DEFAULT
    | < DIFER: "<>" > {System.out.println(image + " -> Operador relacional " + "\n");} : DEFAULT
}



/** ---------- Operadores lógicos ---------- */
<*>TOKEN : {
      < AND: "AND" > {System.out.println(image + " -> Operador lógico " + "\n");} : DEFAULT
    | < OR: "OR" > {System.out.println(image + " -> Operador lógico " + "\n");} : DEFAULT
    | < NOT: "NOT" > {System.out.println(image + " -> Operador lógico " + "\n");} : DEFAULT
}



/** ---------- Operadores incrementales ---------- */
<*>TOKEN : {
      < INCRE: "++" > {System.out.println(image + " -> Operador incremental " + "\n");} : DEFAULT
    | < DECRE: "--" > {System.out.println(image + " -> Operador incremental " + "\n");} : DEFAULT
}



/** ---------- Operadores de asignación ---------- */
<*>TOKEN : {
      < ASIG: "=" > {System.out.println(image + " -> Operador de asignación " + "\n");} : DEFAULT
    | < SUMASIG: "+=" > {System.out.println(image + " -> Operador de asignación " + "\n");} : DEFAULT
    | < RESASIG: "-=" > {System.out.println(image + " -> Operador de asignación " + "\n");} : DEFAULT
    | < MULASIG: "*=" > {System.out.println(image + " -> Operador de asignación " + "\n");} : DEFAULT
    | < DIVASIG: "/=" > {System.out.println(image + " -> Operador de asignación " + "\n");} : DEFAULT
    | < MODASIG: "%=" > {System.out.println(image + " -> Operador de asignación " + "\n");} : DEFAULT
}



/** ---------- Operadores aritmeticos ---------- */
<*>TOKEN : {
      < SUMA: "+" > {System.out.println(image + " -> Operador aritmetico " + "\n");} : DEFAULT
    | < RESTA: "-" > {System.out.println(image + " -> Operador aritmetico " + "\n");} : DEFAULT
    | < DIVIS: "/" > {System.out.println(image + " -> Operador aritmetico " + "\n");} : DEFAULT
    | < POTEN: "^" > {System.out.println(image + " -> Operador aritmetico " + "\n");} : DEFAULT
    | < MODUL: "%" > {System.out.println(image + " -> Operador aritmetico " + "\n");} : DEFAULT
    | < MULTI: "*" > {System.out.println(image + " -> Operador aritmetico " + "\n");} : DEFAULT
}



/** ---------- Variables, clases, paquetes y otros... ---------- */
<*>TOKEN : {
      < #letraMay: ["A"-"Z"]  >
    | < #letraMin: ["a"-"z"]  >
    | < #c: ["a"-"z", "A"-"Z", "0"-"9", "|", "'", "/", "(", ")", "{", "}", "[", "]", ",", ".", ";", "_", ":", " ", "<", ">", "+", "-", "*", "="]  >
    | < #c2: ["@", "#", "&", "%"]  >
    | < #digito: ["0"-"9"]  >
    | < ENTERO: (<digito>)+ > {System.out.println(image + " -> Numero entero " + "\n");} : DEFAULT
    | < FLOTANTEDOUBLE: ((<digito>)+ "." (<digito>)+)+ > {System.out.println(image + " -> Numero flotante " + "\n");} : DEFAULT
    | < CLASES: <letraMay>(<letraMin>)+ > {System.out.println(image + " -> Nombre de clase " + "\n");} : DEFAULT
    | < CARACTER: "'"(< letraMay >|< letraMin >|< digito >)"'" > {System.out.println(image + " -> Caracter " + "\n");} : DEFAULT
    | < CADENA: "\"" (< c >)+ "\"" > {System.out.println(image + " -> Cadena " + "\n");} : DEFAULT
    | < PAQUET: (<letraMay>) (<letraMin>)+ ("_" (<letraMay>) (<letraMin>)+)+ > {System.out.println(image + " -> Nombre de paquete " + "\n");} : DEFAULT
    | < VAR: (<letraMin>)+ > {System.out.println(image + " -> Nombre de variable " + "\n");} : DEFAULT
    | < FUNC: (< letraMin >)+ (< letraMay > (< letraMin >)+)+ > {System.out.println(image + " -> Nombre de función " + "\n");} : DEFAULT
    | < LIBR: (< letraMin >)+ ("_"(< letraMin >|< letraMay >)+)+ > {System.out.println(image + " -> Nombre de libreria " + "\n");} : DEFAULT
    | < ENTEROINV: (<digito>|<c>)+ > {System.out.println(image + " -> Numero entero invalido " + "\n");} : DEFAULT
    | < FLOTDOBINV: ((<digito>|<c>)+ "." (<digito><c>))+ > {System.out.println(image + " -> Numero flotante/decimal invalido " + "\n");} : DEFAULT
    | < CADENAINV: "\"" (< c >|<c2>)+ "\"" > {System.out.println(image + " -> Cadena invalida " + "\n");} : DEFAULT  
}

/** ---------- Caracteres no validos ---------- */
<*>TOKEN : {
      < A: "\u00aa" > {System.out.println(image + " -> Carácter no valido " + "\n");} : DEFAULT
    | < GRADOS: "\u00ba" > {System.out.println(image + " -> Carácter no valido " + "\n");} : DEFAULT
    | < CPOR: "\u00e7" > {System.out.println(image + " -> Carácter no valido " + "\n");} : DEFAULT
    | < PUNTOS: "\u00a8" > {System.out.println(image + " -> Carácter no valido " + "\n");} : DEFAULT
    | < ACENTOI: "`" > {System.out.println(image + " -> Carácter no valido " + "\n");} : DEFAULT
    | < ACENTO: "\u00b4" > {System.out.println(image + " -> Carácter no valido " + "\n");} : DEFAULT
    | < BARRAI: "\\" > {System.out.println(image + " -> Carácter no valido " + "\n");} : DEFAULT
    | < ARROBA: "\u0040" > {System.out.println(image + " -> Carácter no valido " + "\n");} : DEFAULT
}
/** Fin Lexico */


/**Inicio sintactico*/

void Inicio() : 
{}
{
    try {
        Import() Clases() <EOF>
    }
    catch(ParseException e)
    {
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
        System.out.println("Error en definicion de import o clase general");
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
        }
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Cuerpo();}
    }
}

void Import() : 
{}
{
    (<IMPORT> Import1())?
}

void Import1() : 
{}
{
    try {
        <LIBR> Puntoyc() Import()
    }
    catch(ParseException e){           
            Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
            System.out.println("Error en nombre de libreria, linea: "+t.beginLine+", columna: "+t.beginColumn);
            la=t.beginLine;
        if (t.image=="\n")
        {
            linea = linea + 1;
        }
        if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
        {
            do{
				t=getNextToken();
                }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
            }
			
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){Import();}			
    }
}

void Puntoyc():
{}
{
    try {
            <PYC>
        }
        catch(ParseException e){           
                Token t=getToken(0);
                if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
                System.out.println("Se esperaba \";\", linea: "+t.beginLine+", columna: "+t.beginColumn);
                la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
                    }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
                } 
        }
}

void Tipo() : 
{}
{
    try {
        DeclararInt() | DeclararChar() | DeclararString() | DeclararBool() | DeclararFloat() | DeclararDouble()
    }
    catch(ParseException e)
    {
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
        System.out.println("Se esperaba tipo de dato, linea: "+t.beginLine+", columna: "+t.beginColumn);
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
        }
    }
}

void DeclararInt() : 
{TA.InsertarSimbolo(token, GramaticaConstants.INT);}
{
    try {
        <INT>
    }
    catch(ParseException e)
    {
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
        System.out.println("Se esperaba tipo de dato, linea: "+t.beginLine+", columna: "+t.beginColumn);
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
        }
    }
}

void DeclararChar() : 
{TA.InsertarSimbolo(token.next, GramaticaConstants.CHAR);}
{
    try {
        <CHAR>
    }
    catch(ParseException e)
    {
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
        System.out.println("Se esperaba tipo de dato, linea: "+t.beginLine+", columna: "+t.beginColumn);
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
        }
    }
}

void DeclararString() : 
{TA.InsertarSimbolo(token.next, GramaticaConstants.STRING);}
{
    try {
        <STRING>
    }
    catch(ParseException e)
    {
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
        System.out.println("Se esperaba tipo de dato, linea: "+t.beginLine+", columna: "+t.beginColumn);
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
        }
    }
}

void DeclararBool() : 
{TA.InsertarSimbolo(token.next, GramaticaConstants.BOOLEAN);}
{
    try {
        <BOOLEAN>
    }
    catch(ParseException e)
    {
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
        System.out.println("Se esperaba tipo de dato, linea: "+t.beginLine+", columna: "+t.beginColumn);
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
        }
    }
}

void DeclararFloat() : 
{TA.InsertarSimbolo(token.next, GramaticaConstants.FLOAT);}
{
    try {
        <FLOAT>
    }
    catch(ParseException e)
    {
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
        System.out.println("Se esperaba tipo de dato, linea: "+t.beginLine+", columna: "+t.beginColumn);
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
        }
    }
}

void DeclararDouble() : 
{TA.InsertarSimbolo(token.next, GramaticaConstants.DOUBLE);}
{
    try {
        <DOUBLE>
    }
    catch(ParseException e)
    {
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
        System.out.println("Se esperaba tipo de dato, linea: "+t.beginLine+", columna: "+t.beginColumn);
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
        }
    }
}

void TipoEncapsular() : 
{}
{
    try {
      <PUBLIC> | <PRIVATE>
	}
	catch(ParseException e)
	{
        Token t=getToken(0);
            if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
		System.out.println("Se espereba \"public\" o \"private\", linea: "+t.beginLine+", columna: "+t.beginColumn);
        la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
            do{
                t=getNextToken();
            }while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
        }
	}
}

void Clasesn():
{}
{
	try {
		<CLASES>
	}
	catch(ParseException e)
	{
		Token t=getToken(0);
		if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
		System.out.println("Error en nombre de clase, linea: "+t.beginLine+", columna: "+t.beginColumn);
		la=t.beginLine;
		if (t.image=="\n")
		{
			linea = linea + 1;
		}
		if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
		{
        do{
            t=getNextToken();
		}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
		}
	}
}

void Clases() : 
{}
{
    try {
        TipoEncapsular() <CLASS> Clasesn() Llavea() ContenidoClase() Llavec()	
    }
    catch(ParseException e)
    {
            Token t=getToken(0);
                if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
				t=getNextToken();
			}
			if(t.beginColumn!=1){
				System.out.println("Se esperaba \"class\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			}
            la=t.beginLine;
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
            }
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			ContenidoClase();	}
    }
}

void Llavea():
{}
{
	try {
			<LLAVA>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"{\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
			}
	}
}

void Llavec():
{}
{
	try {
			<LLAVC>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"}\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void ContenidoClase() : 
{}
{	
		try {
			(((TipoEncapsular() (Declaracion() | Metodo() | Constructor())) | Declaracion()) ContenidoClase())?
		}
		catch(ParseException e)
		{
				Token t=getToken(0);
					if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
			   t=getNextToken();
			}
				System.out.println("Error en contenido de clase, linea: "+t.beginLine+", columna: "+t.beginColumn);
				la=t.beginLine;
				if (t.image=="\n")
				{
					linea = linea + 1;
				}
				if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
				{
					do{
						t=getNextToken();
					}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}");
				}
				if(t.next!=null){t=getNextToken();}
				if(t.kind != GramaticaTokenManager.EOF){
				Constructor();
				Cuerpo();}
		}
}

void Parea():
{}
{
	try {
			<PAREA>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"(\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Parec():
{}
{
	try {
			<PAREC>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \")\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Constructor() : 
{}
{
	try {
			Clasesn() Parea()Argumentos()Parec() Llavea()Sentencia()Llavec() ConstructorA()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en constructor, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Sentencia();
			ConstructorA();}
	}
}

void ConstructorA() : 
{}
{
	try {
			TipoEncapsular()(Cuerpo()|(Clasesn() Parea()Argumentos()Parec() Llavea()Sentencia()Llavec() ConstructorA())?)
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en constructor, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Cuerpo();
			Argumentos();
			Sentencia();
			ConstructorA();}
	}
}

void Void():
{}
{
	try {
			<VOID>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"void\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Cuerpo() : 
{}
{
	try {
			Tipo() (Metodo() | Variables_clase()) CuerpoA() | Void() MetodosA()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"void\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Metodo();
			MetodosA();}
	}
}

void CuerpoA() : 
{}
{
	
     (TipoEncapsular() (Tipo() (Metodo() | Variables_clase())| Void() MetodosA()))?
}

void MetodosA() : 
{}
{
	try {
			Func() Metodo_void() CuerpoA() | Principal() CuerpoA()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en metodo, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Metodo_void();
			CuerpoA();
			Principal();
			CuerpoA();}
	}
}

void Prinmain():
{}
{
	try {
			<PRINMAIN> 
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"principalMain\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Metodo_void();
			CuerpoA();
			Principal();
			CuerpoA();}
	}
}

void Principal() : 
{}
{
	try {
			Prinmain()Parea()Parec() Llavea()Sentencia()Llavec() 
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en metodo principal, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Func():
{}
{
	try {
			<FUNC>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en nombre de funcion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Metodo() : 
{}
{
	try {
			Func() Parea()Argumentos()Parec() Llavea()Sentencia() Retorno()Llavec()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en metodo, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Argumentos();
			Sentencia();
			Retorno();}
	}
	
}

void Return():
{}
{
	try {
			<RETURN>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"return\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Retorno() : 
{}
{
	try {
			Return() Tipo_retorno()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en retorno, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Tipo_retorno();			}
	}
}

void Tipo_retorno() : 
{}
{
    Valor()Puntoyc()
}

void Metodo_void() : 
{}
{
	try {
			Parea()Argumentos()Parec() Llavea()Sentencia()Llavec()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en metodo, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Argumentos();	
			Sentencia();
			Cuerpo();}
	}
}

void Argumentos() : 
{}
{
	try {
			(Tipo() Declaracion()) ArgumentosA()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en argumentos, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Declaracion();
			ArgumentosA();}
	}
}

void ArgumentosA() : 
{}
{
    (<COM>Argumentos())?
}

void Variables_clase() : 
{}
{
	try {
			(Declaracion()Puntoyc() Variables_clase())?
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en variables de clase, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Variables_clase();}
	}
}

void Sentencia() : 
{}
{
	try {
			(<FOR> Sentencia_ciclofor() Sentencia() | <IF> Sentencia_condicion() Sentencia() | Declaracion() Puntoyc() Sentencia() | Asignacion() Puntoyc() Sentencia()| <SWITCH> Sentencia_switch() Sentencia() | <TRY> Sentencia_try() Sentencia() | <THIS> Sentencia_this() Sentencia() | Sentencia_ciclowhile() Sentencia() | Func() SentenciaLlamarMetodo() Sentencia())?
        }
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en sentencia, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Sentencia();}
	}
}



void Parametros() : 
{}
{
	try {
			(Var() (<CORA> ArregloL())? Parametros2() | Exp() | <CADENA> Parametros2() | <CARACTER> Parametros2())?
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en parametros, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Parametros2();}
	}
}

void Parametros2() : 
{}
{
	try {
			(<COM>(Var() (<CORA> ArregloL())? Parametros2() | Exp() | <CADENA> Parametros2() | <CARACTER> Parametros2()))?
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en parametros, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			Parametros2();}
	}
}


void SentenciaLlamarMetodo() : 
{}
{
	try {
			Parea()Parametros()Parec()Puntoyc()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en llamado de metodo, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Parametros();}
	}
}

void Except():
{}
{
	try {
			<EXCEPT>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"Except\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Catch():
{}
{
	try {
			<CATCH>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"Catch\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Sentencia_try() : 
{}
{
	try {
			Llavea()Sentencia()Llavec() Catch() Parea() Except() Var()Parec() Llavea()Sentencia()Llavec()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en try-catch, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Catch();
		Sentencia();}
	}
}

void Sentencia_ciclofor() : 
{}
{
	try {
			Parea()Declaracionfor()Puntoyc() Condg()Puntoyc() Sentencia_incremental()Parec() Llavea()Sentencia()Llavec()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en ciclo for, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Sentencia();}
	}
}

void While():
{}
{
	try {
			<WHILE>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"While\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Do():
{}
{
	try {
			<DO>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"Do\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Sentencia_ciclowhile() : 
{}
{
	try {
			While() Parea()Condg()Parec() Llavea()Sentencia()Llavec() | Do() Llavea()Sentencia()Llavec() While() Parea()Condg()Parec() Puntoyc()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en ciclo while, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Sentencia();}
	}
}

void Sentencia_condicion() : 
{}
{
	try {
			Parea()Condg()Parec() Llavea()Sentencia()Llavec() Si_e()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en condicion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Sentencia();
		Si_e();}
	}
}

void Sentencia_incremental() : 
{}
{
	try {
			<INCRE> | <DECRE>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"++\" o \"--\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Sentencia_this() : 
{}
{
	try {
			(<VAR> <ASIG> Var() (<CORA> ArregloL())? Puntoyc() Sentencia_this())?
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en condicion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Sentencia_this();}
	}
}

void Break():
{}
{
	try {
			<BREAK> 
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"break\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Sentencia_switch() : 
{}
{
	try {
			Var() (<CORA> ArregloL())? Llavea()Case() <DEF><DOSP> Sentencia() Break()Puntoyc()Llavec() 
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en sentencia switch, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Sentencia_switch();
		Sentencia();}
	}
}

void Cases():
{}
{
	try {
			<CASE>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"Case\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Dosp():
{}
{
	try {
			<DOSP>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \":\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Case() : 
{}
{
    (Cases() Caso()Dosp() Sentencia() Break()Puntoyc() Case())?
}

void Caso() : 
{}
{
	try {
			<ENTERO> | <CADENA> | <CARACTER> | Var()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en sentencia caso, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Si_e() : 
{}
{
    (<ELSE> Si_EA())?
}

void Si_EA() : 
{}
{
	try {
			Llavea()Sentencia()Llavec() | Sentencia_condicion()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en else, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Sentencia();
		Sentencia_condicion();}
	}
}

void Condg() : 
{}
{
	try {
			(Parea()Condg()Parec()| Cond() | <NOT> Condg()) CondgA()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en condicion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Condg();
		Cond();}
	}
}

void CondgA() : 
{}
{
	try {
			(<AND> Condg() CondgA() | <OR> Condg() CondgA() | <NOT> Condg() CondgA())?
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en condicion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Exp();}
	}
}

void Cond() : 
{}
{
	try {
			Exp() (<MAYORQ> | <MENORQ> | <MAYORI> | <MENORI> | <IGUALI> | <DIFER> ) Exp() | <TRUE> | <FALSE>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en condicion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Exp();}
	}
}

void Exp() : 
{}
{
	try {
			Parea()Exp()Parec() ExpA() | <VAR>(<CORA> ArregloL())? ExpA() | <ENTERO> ExpA() | <FLOTANTEDOUBLE> ExpA()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en condicion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		ExpA();}
	}
}

void ExpA() : 
{}
{
	try {
			<SUMA> Exp() | <RESTA> Exp() | <DIVIS> Exp() | <POTEN> Exp() | <MODUL> Exp() | Parametros()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en condicion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		Parametros();}
	}
}

void Var():
{}
{
	try {
			<VAR>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en nombre de variable, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}	
}

void Asignacion() :
{
    JOptionPane.showMessageDialog(null,"Analisis sem: ");
}
{
    <VAR> (<ASIG> Expr() | Sentencia_incremental())
}

void Expr() : 
{}
{
    Tipo() Expr2() | <PAREA> Expr() <PAREC> Expr2()
}

void Expr2() :
{}
{
    (Oper() Expr())?
}

void Declaracion() : 
{}
{
	try {
			Tipo() (<CORA><CORC>)? <VAR> (DeclaracionAsignacion())? 
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en declaracion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		if(t.kind != GramaticaTokenManager.EOF){
		DeclaracionTA();
		DeclaracionT();}
	}	
}

void DeclaracionAsignacion() : 
{
Token tokenSigDato = null;
if (getNextToken().image.equals("=")) {
    tokenSigDato = getNextToken();
}
JOptionPane.showMessageDialog(null, tokenSigDato + " " + tokenSigDato.kind);
JOptionPane.showMessageDialog(null, TA.checkAsing(token, tokenSigDato));
}
{
	try {
			<ASIG> Expr()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en declaracion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
		if(t.next!=null){t=getNextToken();}
		DeclaracionTA();
		DeclaracionT();
	}	
}

void DeclaracionT() : 
{}
{
	try {
			(Valor()(Oper()Valor())*)|(Parea()Valor()(Oper()Valor())*Parec())
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en declaracion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void DeclaracionTA() : 
{}
{
	try {
			((Valor()(Oper()Valor())*)|(Parea()Valor()(Oper()Valor())*Parec()))DeclaracionTA1()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en declaracion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			DeclaracionTA1();}
	}
}

void DeclaracionTA1() : 
{}
{
	try {
			(<COM>(Valor()(Oper()Valor())*)|(Parea()Valor()(Oper()Valor())*Parec())DeclaracionTA1())?
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en declaracion, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
			if(t.next!=null){t=getNextToken();}
			if(t.kind != GramaticaTokenManager.EOF){
			DeclaracionTA1();}
	}
}

void ArregloD():
{}
{
	try {
			<CORA><CORC>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba \"[]\", linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void ArregloL():
{}
{
	 try {
			((<ENTERO>)
    |(<VAR>)
     ) <CORC>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en declaracion de arreglo, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Valor():
{}
{
	try {
			<ENTERO>|<FLOTANTEDOUBLE>|<CHAR>|<CADENA>|<TRUE>|<FALSE>|<VAR> (<CORA>ArregloL())?
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en asignacion de valor, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

void Oper():
{}
{
	try {
		<SUMA>|<RESTA>|<DIVIS>|<POTEN>|<MODUL>|<MULTI>
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Se esperaba un operador, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
	
}

void Z() : 
{}
{
    <TRUE> | <FALSE> | Var()
}

void X() : 
{}
{
    <ENTERO> X1() | Var() X1() | Parea()X()Parec() X1() 
}

void X1() : 
{}
{
    (<SUMA> X() X1() | <RESTA> X() X1() | <DIVIS> X() X1() | <POTEN> X() X1() | <MODUL> X() X1())?
}

void Y() : 
{}
{
    <FLOTANTEDOUBLE> Y1() | Var() Y1() | Parea()Y() Parec() Y1()
}

void Y1() : 
{}
{
    <SUMA> Y() Y1() | <RESTA> Y() Y1() | <DIVIS> Y() Y1() | <POTEN> Y() Y1() | <MODUL> Y() Y1() 
}

void Declaracionfor() : 
{}
{
	try {
		<INT> Var() (<CORA> ArregloL())? <ASIG> X() | <DOUBLE>  Var() (<CORA> ArregloL())? <ASIG> Y() | <FLOAT>  Var() (<CORA> ArregloL())? <ASIG> Y()
	}
	catch(ParseException e)
	{
			Token t=getToken(0);
				if(t.image==";" | t.image=="{" | t.image=="}" | t.image==null){
           t=getNextToken();
        }
			System.out.println("Error en declaracion de variable de ciclo for, linea: "+t.beginLine+", columna: "+t.beginColumn);
			if (t.image=="\n")
			{
				linea = linea + 1;
			}
			if (t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n"& t.image != "{" & t.image != "}")
			{
				do{
					t=getNextToken();
				}while(t.image != ";" & t.kind != GramaticaTokenManager.EOF & t.image != "\n" & t.image != "{" & t.image != "}");
			}
	}
}

/**FIN SINTACTICO*/